{"version":3,"sources":["pages/Quiz.js","components/Title.js","components/Caption.js","components/Header.js","components/Button.js","pages/Home.js","components/Card.js","components/CardContainer.js","pages/Categories.js","components/Question.js","components/Answer.js","components/Congratulation.js","components/Loading.js","index.js"],"names":["numberOfQuestions","finish","Title","title","className","Caption","caption","Fragment","Header","src","Button","text","to","Home","Component","Card","state","data","image","path","this","map","card","alt","CardContainer","Categories","Question","question","Answer","index","answer","correctAnswer","onChange","buttonState","useState","buttonClass","setButtonClass","disabled","onClick","Congratulation","goodAnswers","Loading","CATEGORY","gql","Quiz","currentCategory","window","location","pathname","slice","counter","increaseCounter","categoryIdValue","changeCategoryId","changeButtonState","console","log","changeQuestion","answerValue","setTimeout","useQuery","variables","categoryId","loading","error","JSON","stringify","category","id","answers","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","basename","process","exact","component","routes","document","getElementById"],"mappings":"mIAkBIA,EAEAC,E,+FCZWC,EAND,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACZ,oBAAIC,UAAU,QAAd,SACGD,KCIUE,EANC,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACd,cAAC,IAAMC,SAAP,UACGD,KCQUE,EARA,SAAC,GAAD,IAAEF,EAAF,EAAEA,QAAF,OACb,mCACE,cAAC,EAAD,CAAOH,MAAO,eAAC,WAAD,WAAU,sBAAMC,UAAU,YAAhB,wBAAV,SAA6D,qBAAKK,IAAI,2BACpF,cAAC,EAAD,CACEH,QAASA,QCGAI,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACb,cAAC,IAAD,CACEP,UAAU,SACVQ,GAAG,iBAFL,SAEoBD,KCUPE,E,4JAZb,WACE,OACE,eAAC,IAAMN,SAAP,WACE,cAAC,EAAD,CACED,QAAS,qBAAIF,UAAU,UAAd,yDAAoE,sBAAMA,UAAU,YAAhB,oBAApE,eAEX,cAAC,EAAD,CAAQO,KAAK,0B,GAPFG,aC2EJC,E,4MA3EbC,MAAQ,CACNC,KAAM,CAAC,CACLd,MAAO,YACPe,MAAO,yBACPC,KAAM,cACN,CACAhB,MAAO,aACPe,MAAO,uBACPC,KAAM,YACN,CACAhB,MAAO,UACPe,MAAO,uBACPC,KAAM,YACN,CACAhB,MAAO,SACPe,MAAO,qBACPC,KAAM,WACN,CACAhB,MAAO,UACPe,MAAO,sBACPC,KAAM,c,4CAkCV,WACE,OACE,cAAC,WAAD,UACGC,KAAKJ,MAAMC,KAAKI,KAAI,SAACC,GACpB,OACE,eAAC,IAAD,CACElB,UAAU,OACVQ,GAAIU,EAAKH,KAFX,UAIE,qBAAKf,UAAU,qBAAf,SACE,qBAAKA,UAAU,WAAWK,IAAKa,EAAKJ,MAAOK,IAAI,mBAEjD,oBAAInB,UAAU,aAAd,SAA4BkB,EAAKnB,UAJ5BmB,EAAKnB,gB,GA/DLW,aCMJU,EANO,kBACpB,qBAAKpB,UAAU,iBAAf,SACE,cAAC,EAAD,OCOWqB,EAPI,kBACjB,eAAC,IAAMlB,SAAP,WACE,cAAC,EAAD,CAAOJ,MAAO,eAAC,WAAD,6BAAyB,sBAAMC,UAAU,YAAhB,+BACvC,cAAC,EAAD,Q,gBCFWsB,EAJE,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACf,oBAAIvB,UAAU,WAAd,SAA0BuB,KCsBbC,EAvBA,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,YAAgB,EAEjCC,mBAAS,IAFwB,mBAEhEC,EAFgE,KAEnDC,EAFmD,KAcvE,OACE,eAAC,WAAD,WACE,qBAAKhC,UAAU,eAAf,SAA+ByB,IAC/B,wBAAQzB,UAAW,iBAAmB+B,EAAaE,SAAUJ,EAAaK,QAb1D,WACfP,IAAkBF,GACnBO,EAAe,yBACfJ,EAAS,KAETI,EAAe,uBACfJ,EAAS,KAOT,SAAiGF,QCNxFS,EAVQ,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,YAAaxC,EAAuB,EAAvBA,kBACpC,OACE,sBAAKI,UAAU,iBAAf,UACE,qBAAIA,UAAU,uBAAd,4CAAiE,sBAAMA,UAAU,YAAhB,kBAAjE,wBACA,oBAAGA,UAAU,wBAAb,UAAsCoC,EAAtC,MAAsDxC,KACtD,cAAC,EAAD,CAAQW,KAAK,gCCEJ8B,EARC,WACd,OACE,qBAAKrC,UAAU,oBAAf,SACE,qBAAKA,UAAU,eAAf,2BZEAsC,EAAWC,cAAH,uMAYVH,EAAc,EA6DHI,EA1DF,WAEX,IAAIC,EAAkBC,OAAOC,SAASC,SACtCH,EAAkBA,EAAgBI,MAAM,GAHvB,MAKgBf,mBAAS,GALzB,mBAKZgB,EALY,KAKHC,EALG,OAM2BjB,mBAAS,GAAD,OAAIW,EAAJ,YAAuBK,IAN1D,mBAMVE,EANU,KAMOC,EANP,OAOwBnB,oBAAS,GAPjC,mBAOVD,EAPU,KAOGqB,EAPH,KASdJ,EAAUlD,IAAmBC,EAAS,MAEzCsD,QAAQC,IAAIJ,GAEZ,IAAMK,EAAiB,SAACC,GACtBJ,GAAkB,GAClBK,YAAW,WACNT,EAAUlD,GACXmD,EAAgBD,GAAoB,GACpCG,EAAiB,GAAD,OAAIR,EAAJ,YAAuBK,IACvCV,GAA4BkB,EAC5BJ,GAAkB,KAElBH,EAAgBD,GAAoB,GACpCG,EAAiB,GAAD,OAAIR,EAAJ,YAAuBK,IACvCV,GAA4BkB,EAC5BzD,EAAS,cAAC,EAAD,CAAgBuC,YAAaA,EAAaxC,kBAAmBA,OAEvE,MA3BY,EA+BY4D,mBAASlB,EAAU,CAACmB,UAAW,CAACC,WAAYV,KAApEW,EA/BY,EA+BZA,QAASC,EA/BG,EA+BHA,MAAO/C,EA/BJ,EA+BIA,KACrB,OAAG8C,EAAgB,cAAC,EAAD,KAChBC,GAAOT,QAAQC,IAAIS,KAAKC,UAAUF,EAAO,KAAM,IAGhD,sBAAK5D,UAAU,iBAAf,UAEEa,EAAKkD,SAAS9C,KAAI,SAAC8C,GAAD,OAChBnE,EAAoBmE,EAASnE,kBAC7B,eAAC,WAAD,WACE,cAAC,EAAD,CACE2B,SAAUwC,EAASxC,UADNwC,EAASC,IAGxB,sBAAKhE,UAAU,mBAAf,UACE,cAAC,EAAD,CAAgByB,MAAM,IAAIC,OAAQqC,EAASE,QAAQ,GAAItC,cAAeoC,EAASpC,cAAeC,SAAUyB,EAAgBxB,YAAaA,GAAzH,KACZ,cAAC,EAAD,CAAgBJ,MAAM,IAAIC,OAAQqC,EAASE,QAAQ,GAAItC,cAAeoC,EAASpC,cAAeC,SAAUyB,EAAgBxB,YAAaA,GAAzH,KACZ,cAAC,EAAD,CAAgBJ,MAAM,IAAIC,OAAQqC,EAASE,QAAQ,GAAItC,cAAeoC,EAASpC,cAAeC,SAAUyB,EAAgBxB,YAAaA,GAAzH,KACZ,cAAC,EAAD,CAAgBJ,MAAM,IAAIC,OAAQqC,EAASE,QAAQ,GAAItC,cAAeoC,EAASpC,cAAeC,SAAUyB,EAAgBxB,YAAaA,GAAzH,cAKnBhC,OajECqE,G,MAAS,IAAIC,eAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,mBAiBbC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,eAAC,IAAD,CAAeO,SAAYC,GAA3B,UACE,cAAC,IAAD,CAAOC,OAAK,EAAC5D,KAAK,IAAI6D,UAAWnE,IACjC,cAAC,IAAD,CAAOkE,OAAK,EAAC5D,KAAK,iBAAc6D,UAAWvD,IAlBlC,CACb,CACEN,KAAM,cACN,CACAA,KAAM,YACN,CACAA,KAAM,YACN,CACAA,KAAM,WACN,CACAA,KAAM,aASIE,KAAI,SAAC4D,GAAD,OACV,cAAC,IAAD,CAAyBF,OAAK,EAAC5D,KAAM8D,EAAO9D,KAAM6D,UAAWpC,GAAjDqC,EAAO9D,cAIzB+D,SAASC,eAAe,W","file":"static/js/main.02ab96ba.chunk.js","sourcesContent":["import React, {Fragment, useState} from \"react\";\r\nimport Question from \"../components/Question\";\r\nimport Answer from \"../components/Answer\";\r\nimport Congratulation from \"../components/Congratulation\";\r\nimport Loading from \"../components/Loading\";\r\nimport { gql , useQuery} from \"@apollo/client\";\r\n\r\nconst CATEGORY = gql`\r\n  query Query($categoryId: String!) {\r\n    category(id: $categoryId) {\r\n      id\r\n      question\r\n      answers\r\n      correctAnswer\r\n      numberOfQuestions\r\n    }\r\n  }\r\n`\r\nlet numberOfQuestions;\r\nlet goodAnswers = 0;\r\nlet finish;\r\n\r\nconst Quiz = () => {\r\n  //Detectar la categoría\r\n  let currentCategory = window.location.pathname;\r\n  currentCategory = currentCategory.slice(1);\r\n\r\n  let [counter, increaseCounter] = useState(1);\r\n  const [categoryIdValue, changeCategoryId] = useState(`${currentCategory} ${counter}`);\r\n  const [buttonState, changeButtonState] = useState(false);\r\n\r\n  if(counter < numberOfQuestions) finish = null;\r\n\r\n  console.log(categoryIdValue)\r\n\r\n  const changeQuestion = (answerValue) => {\r\n    changeButtonState(true);\r\n    setTimeout(() => {\r\n      if(counter < numberOfQuestions) {\r\n        increaseCounter(counter = counter + 1);\r\n        changeCategoryId(`${currentCategory} ${counter}`);\r\n        goodAnswers = goodAnswers + answerValue;\r\n        changeButtonState(false);\r\n      } else {\r\n        increaseCounter(counter = counter + 1);\r\n        changeCategoryId(`${currentCategory} ${counter}`);\r\n        goodAnswers = goodAnswers + answerValue;\r\n        finish = <Congratulation goodAnswers={goodAnswers} numberOfQuestions={numberOfQuestions}/>;\r\n      }\r\n    }, 1000)\r\n  }\r\n\r\n  //Catch Data From API\r\n  let {loading, error, data} = useQuery(CATEGORY, {variables: {categoryId: categoryIdValue}});\r\n  if(loading) return <Loading/>;\r\n  if(error) console.log(JSON.stringify(error, null, 2));\r\n\r\n  return(\r\n    <div className=\"quiz_container\">\r\n    {\r\n      data.category.map((category) => (\r\n        numberOfQuestions = category.numberOfQuestions,\r\n        <Fragment>\r\n          <Question key={category.id}\r\n            question={category.question}\r\n          />\r\n          <div className=\"answer_container\">\r\n            <Answer key=\"a\" index=\"a\" answer={category.answers[0]} correctAnswer={category.correctAnswer} onChange={changeQuestion} buttonState={buttonState}/>\r\n            <Answer key=\"b\" index=\"b\" answer={category.answers[1]} correctAnswer={category.correctAnswer} onChange={changeQuestion} buttonState={buttonState}/>\r\n            <Answer key=\"c\" index=\"c\" answer={category.answers[2]} correctAnswer={category.correctAnswer} onChange={changeQuestion} buttonState={buttonState}/>\r\n            <Answer key=\"d\" index=\"d\" answer={category.answers[3]} correctAnswer={category.correctAnswer} onChange={changeQuestion} buttonState={buttonState}/>\r\n          </div>\r\n        </Fragment>\r\n      ))\r\n    }\r\n    {finish}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\r\n\r\nconst Title = ({title}) => (\r\n  <h1 className=\"title\">\r\n    {title}\r\n  </h1>\r\n)\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Caption = ({caption}) =>(\r\n  <React.Fragment>\r\n    {caption}\r\n  </React.Fragment>\r\n)\r\n\r\nexport default Caption;\r\n","import React, { Fragment } from \"react\";\r\nimport Title from \"./Title\";\r\nimport Caption from \"./Caption\";\r\n\r\nconst Header = ({caption}) => (\r\n  <header>\r\n    <Title title={<Fragment><span className=\"highlight\">JavaScript</span> Quiz <img src=\"./images/icon.svg\"></img></Fragment>}/>\r\n    <Caption\r\n      caption={caption}/>\r\n  </header>\r\n)\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst Button = ({text}) => (\r\n  <Link\r\n    className=\"button\"\r\n    to=\"/categorías\">{text}\r\n  </Link>\r\n)\r\n\r\nexport default Button;\r\n","import React, {Component} from \"react\";\r\nimport Header from '../components/Header';\r\nimport Button from '../components/Button';\r\n\r\nclass Home extends Component{\r\n  render(){\r\n    return(\r\n      <React.Fragment>\r\n        <Header\r\n          caption={<h2 className=\"caption\">Prueba tus conocimientos en el lenguaje que <span className='highlight'>domina</span> la web</h2>}\r\n        />\r\n        <Button text=\"¡Empecemos!\"/>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, {Component, Fragment} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Card extends Component{\r\n  state = {\r\n    data: [{\r\n      title: \"Variables\",\r\n      image: \"./images/variables.png\",\r\n      path: \"/variables\"\r\n    },{\r\n      title: \"Números\",\r\n      image: \"./images/numbers.png\",\r\n      path: \"/numeros\"\r\n    },{\r\n      title: \"Strings\",\r\n      image: \"./images/strings.png\",\r\n      path: \"/strings\"\r\n    },{\r\n      title: \"Arrays\",\r\n      image: \"./images/array.png\",\r\n      path: \"/arrays\"\r\n    },{\r\n      title: \"Eventos\",\r\n      image: \"./images/events.png\",\r\n      path: \"/eventos\"\r\n    }\r\n    // },{\r\n    //   title: \"Funciones\",\r\n    //   image: \"./images/functions.png\",\r\n    //   path: \"/funciones\"\r\n    // }\r\n    // ,{\r\n    //   title: \"Date\",\r\n    //   image: \"./images/date.png\",\r\n    //   path: \"/date\"\r\n    // },{\r\n    //   title: \"Math\",\r\n    //   image: \"./images/math.png\",\r\n    //   path: \"/math\"\r\n    // },{\r\n    //   title: \"Condicionales\",\r\n    //   image: \"./images/conditionals.png\",\r\n    //   path: \"/condicionales\"\r\n    // },{\r\n    //   title: \"Bucles\",\r\n    //   image: \"./images/loop.png\",\r\n    //   path: \"/bucles\"\r\n    // },{\r\n    //   title: \"Scope\",\r\n    //   image: \"./images/scope.png\",\r\n    //   path: \"/scope\"\r\n    // },{\r\n    //   title: \"Clases\",\r\n    //   image: \"./images/class.png\",\r\n    //   path: \"/clases\"\r\n    // }\r\n    ]\r\n  }\r\n  render(){\r\n    return(\r\n      <Fragment>\r\n        {this.state.data.map((card) => {\r\n          return(\r\n            <Link\r\n              className=\"card\"\r\n              to={card.path}\r\n              key={card.title}>\r\n              <div className=\"card_img_container\">\r\n                <img className=\"card_img\" src={card.image} alt=\"Categoría\"/>\r\n              </div>\r\n              <h2 className=\"card_title\">{card.title}</h2>\r\n            </Link>\r\n          )\r\n        })}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardContainer = () => (\r\n  <div className=\"card_container\">\r\n    <Card/>\r\n  </div>\r\n)\r\n\r\nexport default CardContainer;\r\n","import React, { Fragment } from \"react\";\r\nimport Title from \"../components/Title\";\r\nimport Caption from \"../components/Caption\";\r\nimport CardContainer from \"../components/CardContainer\"\r\n\r\nconst Categories = () =>(\r\n  <React.Fragment>\r\n    <Title title={<Fragment>Selecciona una <span className=\"highlight\">categoría</span></Fragment>}/>\r\n    <CardContainer/>\r\n  </React.Fragment>\r\n)\r\n\r\nexport default Categories;\r\n","import React from \"react\";\r\n\r\nconst Question = ({question}) => (\r\n  <h2 className=\"question\">{question}</h2>\r\n)\r\n\r\nexport default Question;\r\n","import React, {Fragment, useState} from \"react\";\r\n\r\nconst Answer = ({index, answer, correctAnswer, onChange, buttonState}) =>{\r\n\r\n  const [buttonClass, setButtonClass] = useState(\"\");\r\n\r\n  const checkAnswer = () => {\r\n    if(correctAnswer === index) {\r\n      setButtonClass(\"answer_button-correct\");\r\n      onChange(1);\r\n    } else {\r\n      setButtonClass(\"answer_button-wrong\");\r\n      onChange(0);\r\n    }\r\n  };\r\n\r\n  return(\r\n    <Fragment>\r\n      <div className=\"answer_index\">{index}</div>\r\n      <button className={\"answer_button \" + buttonClass} disabled={buttonState} onClick={checkAnswer}>{answer}</button>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default Answer\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Congratulation = ({goodAnswers, numberOfQuestions}) => {\r\n  return(\r\n    <div className=\"congratulation\">\r\n      <h2 className=\"congratulation_title\">&#127881; Haz completado el <span className=\"highlight\">Quiz</span> con este puntaje:</h2>\r\n      <p className=\"congratulation_points\">{goodAnswers} / {numberOfQuestions}</p>\r\n      <Button text=\"Elegir una categoría\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Congratulation;\r\n","import React from 'react';\r\n\r\nconst Loading = () => {\r\n  return(\r\n    <div className=\"loading_container\">\r\n      <div className=\"loading_item\">Loading...</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport { ApolloProvider, ApolloClient, InMemoryCache} from \"@apollo/client\";\r\nimport Home from './pages/Home';\r\nimport Categories from \"./pages/Categories\";\r\nimport Quiz from \"./pages/Quiz\";\r\nimport './css/index.css';\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\" /*\"https://github.com/Lukway-developer/JavaScript-Quiz/graphql\"*/,\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/variables\"\r\n  },{\r\n    path: \"/numeros\"\r\n  },{\r\n    path: \"/strings\"\r\n  },{\r\n    path: \"/arrays\"\r\n  },{\r\n    path: \"/eventos\"\r\n  }\r\n]\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <BrowserRouter basename = {process.env.PUBLIC_URL}>\r\n      <Route exact path=\"/\" component={Home}/>\r\n      <Route exact path=\"/categorías\" component={Categories}/>\r\n      {routes.map((routes) => (\r\n        <Route key={routes.path} exact path={routes.path} component={Quiz}/>\r\n      ))}\r\n    </BrowserRouter>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}